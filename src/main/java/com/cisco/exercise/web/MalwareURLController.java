package com.cisco.exercise.web;

import com.cisco.exercise.domain.exception.InvalidURLException;
import com.cisco.exercise.service.MalwareURLService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.lang.NonNull;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(value = "/urlinfo")
@Slf4j
public class MalwareURLController {
    private final MalwareURLService malwareURLService;

    @Autowired
    public MalwareURLController(MalwareURLService malwareURLService) {
        this.malwareURLService = malwareURLService;
    }

    /**
     * API endpoint to check whether input URL is present in Malware database
     * @param domain Domain name along with port
     * @param originalPath Resource path of original URL.
     * @param queryParameters Query parameters of original URL.
     * @return Response entity with HTTP status 200(OK) if input URL is not part of Malware database otherwise
     * 403(Forbidden)
     */
    @GetMapping(value = {"/1/{domain}", "/1/{domain}/{originalPath}"})
    @ResponseBody
    public ResponseEntity validateURL(
            @PathVariable @NonNull String domain,
            @PathVariable(required = false) String originalPath,
            @RequestParam final MultiValueMap<String, String> queryParameters
    ) {
        log.info("Domain: {} and Resource Path: {}", domain, originalPath);
        malwareURLService.validateURL(domain, originalPath, queryParameters);
        return new ResponseEntity(HttpStatus.OK);
    }

    /**
     * Exception handler for InvalidURLException
     * @param e
     * @return Response entity with HTTP status 403(Forbidden)
     */
    @ExceptionHandler
    @ResponseStatus(HttpStatus.FORBIDDEN)
    @ResponseBody
    public ResponseEntity handleException(final InvalidURLException e) {
        return new ResponseEntity(HttpStatus.FORBIDDEN);
    }
}
