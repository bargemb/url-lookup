package com.cisco.exercise.web;

import com.cisco.exercise.config.TestRedisConfiguration;
import com.cisco.exercise.domain.entity.MalwareURL;
import com.cisco.exercise.domain.repository.MalwareURLRepository;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = TestRedisConfiguration.class)
@AutoConfigureMockMvc
public class MalwareURLControllerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private MalwareURLRepository malwareURLRepository;

    @Test
    public void validateURL_on_valid_url_should_return_ok() throws Exception {
        mockMvc.perform(get("/urlinfo/1/www.google.com"))
                .andDo(print())
                .andExpect(status().isOk());
    }

    @Test
    public void validateURL_on_malware_url_should_return_forbidden() throws Exception {
        MalwareURL malwareURL = new MalwareURL();
        malwareURL.setDomain("www.malware.com:8443");
        malwareURL.setResource("bad");
        malwareURLRepository.save(malwareURL);
        mockMvc.perform(get("/urlinfo/1/www.malware.com:8443/bad"))
                .andDo(print())
                .andExpect(status().isForbidden());
    }
}
